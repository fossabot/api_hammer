#!/usr/bin/env ruby

lib = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.any? { |lp| File.expand_path(lp) == File.expand_path(lib) }

require 'rubygems'
require 'faraday'
require 'logger'
require 'yaml'
require 'pathname'

require 'api_hammer/faraday/outputter'
require 'api_hammer/version'

# OPTION PARSER 

require 'optparse'

# $options default values
$options = {
  :verbose => true,
  :color => nil,
  :pretty => nil,
  :no_ssl_verify => false,
  :headers => {},
  :text => nil,
}

$oauth = {}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] <verb> <url> [body]"

  opts.on("-v", "--[no-]verbose", "Run verbosely - output is like curl -v (this is the default)") do |v|
    $options[:verbose] = v
  end
  opts.on("--[no-]text", "consider the response body to be text (default relies on Content-Type)") do |v|
    $options[:text] = v
  end
  opts.on("-q", "Run quietly - only outputs the response body (same as --no-verbose)") do |v|
    $options[:verbose] = !v
  end
  opts.on("--[no-]color", "Color the output (defaults to color if the output device is a TTY)") do |v|
    $options[:color] = v
  end
  opts.on("--[no-]pretty", "Format the output prettily if supported. (JSON is supported.) defaults to true.") do |v|
    $options[:pretty] = v
  end
  opts.on("-t", "--content-type CONTENT-TYPE", "Sets the Content-Type header of the request. This defaults to application/json if a body is included.") do |v|
    $options[:headers]['Content-Type'.downcase] = v
  end
  opts.on("-o", "--output OUTPUT", "write response to file") do |v|
    $options[:output] = v
  end
  opts.on("--input INPUT", "read request body from file") do |v|
    $options[:input] = v
  end
  opts.on("--oauth-token TOKEN", "OAuth 1.0 token") do |token|
    $oauth[:token] = token
  end
  opts.on("--oauth-token-secret TOKEN_SECRET", "OAuth 1.0 token secret") do |token_secret|
    $oauth[:token_secret] = token_secret
  end
  opts.on("--oauth-consumer-key CONSUMER_KEY", "OAuth 1.0 consumer key") do |consumer_key|
    $oauth[:consumer_key] = consumer_key
  end
  opts.on("--oauth-consumer-secret CONSUMER_SECRET", "OAuth 1.0 consumer secret") do |consumer_secret|
    $oauth[:consumer_secret] = consumer_secret
  end
  opts.on("--oauth-signature-method SIGNATURE_METHOD", "OAuth 1.0 signature method - defaults to HMAC-SHA1") do |signature_method|
    $oauth[:signature_method] = signature_method
  end

  opts.on("--no-ssl-verify", "Disables SSL verification - use cautiously!") do
    $options[:no_ssl_verify] = true
  end
  opts.on("-H", "--header HEADER", %q(Set a header, e.g. -H "User-Agent: mycoolapp")) do |header|
    if header =~ /\A([^:]+):\s*(.*)\z/m # this could be more strictly conformant to rfc, but whatever
      field_name = $1
      field_value = $2
      $options[:headers][field_name.downcase] = field_value
    else
      abort "bad header value given: #{header}"
    end
  end
end
opt_parser.parse!
abort(opt_parser.help) unless (2..3).include?(ARGV.size)

# CONFIGURE THE FARADAY CONNECTION 
faraday_options = {}
if $options[:no_ssl_verify]
  faraday_options[:ssl] = {:verify => false}
end
connection = Faraday.new(faraday_options) do |builder|
  if $oauth.any?
    $oauth[:signature_method] ||= 'HMAC-SHA1'
    require 'oauthenticator'
    OAuthenticator::FaradaySigner
    builder.use OAuthenticator::FaradaySigner, $oauth
  end
  builder.use($options[:verbose] ? ApiHammer::FaradayCurlVOutputter : ApiHammer::FaradayOutputter, $options)
  builder.adapter Faraday.default_adapter
end

httpmethod, url, body = *ARGV

if $options[:input] == '-'
  body = STDIN.read
elsif $options[:input]
  body = Pathname.new($options[:input]).read
end

unless url['://']
  url = 'http://' + url
end

unless Faraday::Connection::METHODS.map{|m| m.to_s.downcase }.include?(httpmethod.downcase)
  abort "Unrecognized HTTP method given: #{httpmethod}\n\n" + opt_parser.help
end

headers = $options[:headers]
if body && !headers['Content-Type'.downcase]
  # I'd rather not have a default content-type, but if none is set then the HTTP adapter sets this to 
  # application/x-www-form-urlencoded anyway. application/json is a better default for our purposes. 
  headers['Content-Type'.downcase] = 'application/json'
end

unless headers.keys.any? { |key| key.downcase == 'user-agent' }
  headers['User-Agent'] = "ApiHammer-hc/#{ApiHammer::VERSION} (#{RUBY_ENGINE} #{RUBY_VERSION}; #{RUBY_PLATFORM})"
end

# OH LOOK IT'S FINALLY ACTUALLY CONNECTING TO SOMETHING

response = connection.run_request(httpmethod.downcase.to_sym, url, body, headers)

if $options[:output]
  File.open($options[:output], 'wb') do |f|
    f.write(response.body)
  end
end
